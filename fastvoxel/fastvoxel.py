# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fastvoxel', [dirname(__file__)])
        except ImportError:
            import _fastvoxel
            return _fastvoxel
        if fp is not None:
            try:
                _mod = imp.load_module('_fastvoxel', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fastvoxel = swig_import_helper()
    del swig_import_helper
else:
    import _fastvoxel
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class vec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec3, name)
    def __init__(self, *args): 
        this = _fastvoxel.new_vec3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _fastvoxel.vec3___eq__(self, *args)
    def __ne__(self, *args): return _fastvoxel.vec3___ne__(self, *args)
    def __div__(self, *args): return _fastvoxel.vec3___div__(self, *args)
    def length(self): return _fastvoxel.vec3_length(self)
    def __add__(self, *args): return _fastvoxel.vec3___add__(self, *args)
    def __neg__(self): return _fastvoxel.vec3___neg__(self)
    def __sub__(self, *args): return _fastvoxel.vec3___sub__(self, *args)
    def __imul__(self, *args): return _fastvoxel.vec3___imul__(self, *args)
    def __idiv__(self, *args): return _fastvoxel.vec3___idiv__(self, *args)
    def __iadd__(self, *args): return _fastvoxel.vec3___iadd__(self, *args)
    def __isub__(self, *args): return _fastvoxel.vec3___isub__(self, *args)
    def __mul__(self, *args): return _fastvoxel.vec3___mul__(self, *args)
    def barelyEqual(self, *args): return _fastvoxel.vec3_barelyEqual(self, *args)
    def set(self, *args): return _fastvoxel.vec3_set(self, *args)
    def reset(self): return _fastvoxel.vec3_reset(self)
    def normalize(self): return _fastvoxel.vec3_normalize(self)
    def cross(self, *args): return _fastvoxel.vec3_cross(self, *args)
    def cosinus(self, *args): return _fastvoxel.vec3_cosinus(self, *args)
    def dot(self, *args): return _fastvoxel.vec3_dot(self, *args)
    def compare(self, *args): return _fastvoxel.vec3_compare(self, *args)
    def angle(self, *args): return _fastvoxel.vec3_angle(self, *args)
    def closestPointOnLine(self, *args): return _fastvoxel.vec3_closestPointOnLine(self, *args)
    def closestPointOnSegment(self, *args): return _fastvoxel.vec3_closestPointOnSegment(self, *args)
    def projectionOnLine(self, *args): return _fastvoxel.vec3_projectionOnLine(self, *args)
    def lerp(self, *args): return _fastvoxel.vec3_lerp(self, *args)
    def distance(self, *args): return _fastvoxel.vec3_distance(self, *args)
    def Rotation(self, *args): return _fastvoxel.vec3_Rotation(self, *args)
    def __str__(self): return _fastvoxel.vec3___str__(self)
    def __repr__(self): return _fastvoxel.vec3___repr__(self)
    def __len__(self): return _fastvoxel.vec3___len__(self)
    def __getitem__(self, *args): return _fastvoxel.vec3___getitem__(self, *args)
    __swig_destroy__ = _fastvoxel.delete_vec3
    __del__ = lambda self : None;
vec3_swigregister = _fastvoxel.vec3_swigregister
vec3_swigregister(vec3)

class ivec3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec3, name)
    def __init__(self, *args): 
        this = _fastvoxel.new_ivec3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _fastvoxel.ivec3___eq__(self, *args)
    def __ne__(self, *args): return _fastvoxel.ivec3___ne__(self, *args)
    def __div__(self, *args): return _fastvoxel.ivec3___div__(self, *args)
    def __add__(self, *args): return _fastvoxel.ivec3___add__(self, *args)
    def __neg__(self): return _fastvoxel.ivec3___neg__(self)
    def __sub__(self, *args): return _fastvoxel.ivec3___sub__(self, *args)
    def __imul__(self, *args): return _fastvoxel.ivec3___imul__(self, *args)
    def __idiv__(self, *args): return _fastvoxel.ivec3___idiv__(self, *args)
    def __iadd__(self, *args): return _fastvoxel.ivec3___iadd__(self, *args)
    def __isub__(self, *args): return _fastvoxel.ivec3___isub__(self, *args)
    def __mul__(self, *args): return _fastvoxel.ivec3___mul__(self, *args)
    def set(self, *args): return _fastvoxel.ivec3_set(self, *args)
    def reset(self): return _fastvoxel.ivec3_reset(self)
    def __str__(self): return _fastvoxel.ivec3___str__(self)
    def __repr__(self): return _fastvoxel.ivec3___repr__(self)
    def __len__(self): return _fastvoxel.ivec3___len__(self)
    def __getitem__(self, *args): return _fastvoxel.ivec3___getitem__(self, *args)
    __swig_destroy__ = _fastvoxel.delete_ivec3
    __del__ = lambda self : None;
ivec3_swigregister = _fastvoxel.ivec3_swigregister
ivec3_swigregister(ivec3)

class ScalarFieldCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFieldCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFieldCreator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastvoxel.new_ScalarFieldCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    def first_step_params(self, *args): return _fastvoxel.ScalarFieldCreator_first_step_params(self, *args)
    def third_step_volumescreator(self): return _fastvoxel.ScalarFieldCreator_third_step_volumescreator(self)
    def get_volume_value(self, *args): return _fastvoxel.ScalarFieldCreator_get_volume_value(self, *args)
    def get_volume_count(self): return _fastvoxel.ScalarFieldCreator_get_volume_count(self)
    def get_center_cell_coordinates(self, *args): return _fastvoxel.ScalarFieldCreator_get_center_cell_coordinates(self, *args)
    def get_cell_id_by_coord(self, *args): return _fastvoxel.ScalarFieldCreator_get_cell_id_by_coord(self, *args)
    def get_matrix_value(self, *args): return _fastvoxel.ScalarFieldCreator_get_matrix_value(self, *args)
    def get_domain_size(self): return _fastvoxel.ScalarFieldCreator_get_domain_size(self)
    def copy_matrix(self, *args): return _fastvoxel.ScalarFieldCreator_copy_matrix(self, *args)
    def copy_matrix_filtered(self, *args): return _fastvoxel.ScalarFieldCreator_copy_matrix_filtered(self, *args)
    def get_cell_value_boundaries(self, *args): return _fastvoxel.ScalarFieldCreator_get_cell_value_boundaries(self, *args)
    def get_first_volume_index(self): return _fastvoxel.ScalarFieldCreator_get_first_volume_index(self)
    __swig_destroy__ = _fastvoxel.delete_ScalarFieldCreator
    __del__ = lambda self : None;
ScalarFieldCreator_swigregister = _fastvoxel.ScalarFieldCreator_swigregister
ScalarFieldCreator_swigregister(ScalarFieldCreator)

class TriangleScalarFieldCreator(ScalarFieldCreator):
    __swig_setmethods__ = {}
    for _s in [ScalarFieldCreator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleScalarFieldCreator, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFieldCreator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleScalarFieldCreator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastvoxel.new_TriangleScalarFieldCreator(*args)
        try: self.this.append(this)
        except: self.this = this
    def second_step_pushtri(self, *args): return _fastvoxel.TriangleScalarFieldCreator_second_step_pushtri(self, *args)
    def load_ply_model(self, *args): return _fastvoxel.TriangleScalarFieldCreator_load_ply_model(self, *args)
    __swig_destroy__ = _fastvoxel.delete_TriangleScalarFieldCreator
    __del__ = lambda self : None;
TriangleScalarFieldCreator_swigregister = _fastvoxel.TriangleScalarFieldCreator_swigregister
TriangleScalarFieldCreator_swigregister(TriangleScalarFieldCreator)



